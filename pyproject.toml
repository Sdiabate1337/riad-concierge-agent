[tool.poetry]
name = "riad-concierge-ai"
version = "1.0.0"
description = "Production-ready WhatsApp AI agent for Moroccan riad hospitality using LangGraph + Instructor architecture"
authors = ["Riad Concierge Team <team@riad-concierge.ai>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
langgraph = "^0.2.0"
instructor = "^1.0.0"
pydantic = "^2.0.0"
fastapi = "^0.100.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
redis = "^5.0.0"
pinecone-client = "^3.0.0"
openai = "^1.0.0"
anthropic = "^0.25.0"
httpx = "^0.25.0"
cryptography = "^41.0.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.6"
sqlalchemy = "^2.0.0"
asyncpg = "^0.29.0"
alembic = "^1.12.0"
python-dotenv = "^1.0.0"
loguru = "^0.7.0"
prometheus-client = "^0.19.0"
aiofiles = "^23.2.1"
langchain-core = "^0.2.0"
langchain-openai = "^0.1.0"
langchain-anthropic = "^0.1.0"
langchain-pinecone = "^0.1.0"
langdetect = "^1.0.9"
googletrans = "^4.0.0"
phonenumbers = "^8.13.0"
pytz = "^2023.3"
schedule = "^1.2.0"
websockets = "^12.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^23.9.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.6.0"
pre-commit = "^3.5.0"
httpx-mock = "^0.21.0"
factory-boy = "^3.3.0"
freezegun = "^1.2.0"

[tool.poetry.scripts]
start = "app.main:main"
dev = "uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "cultural: marks tests requiring cultural validation",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
